name: Security Scanning Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  SECURITY_SCAN_TIMEOUT: 300

jobs:
  dependency-audit:
    name: Dependency Vulnerability Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        id: npm-audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level=moderate --json > audit-results.json || true
          
          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "high-vulnerabilities=$HIGH_VULNS" >> $GITHUB_OUTPUT
          echo "critical-vulnerabilities=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
          
          # Generate human-readable report
          npm audit --audit-level=moderate > audit-report.txt || true
          
          echo "## NPM Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat audit-report.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: |
            audit-results.json
            audit-report.txt
          retention-days: 30

      - name: Security gate check
        if: steps.npm-audit.outputs.high-vulnerabilities > 0 || steps.npm-audit.outputs.critical-vulnerabilities > 0
        run: |
          echo "❌ Security gate failed: Found ${{ steps.npm-audit.outputs.high-vulnerabilities }} high and ${{ steps.npm-audit.outputs.critical-vulnerabilities }} critical vulnerabilities"
          echo "Please review and fix security vulnerabilities before proceeding"
          exit 1

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install license checker
        run: npm install -g license-checker

      - name: Install dependencies
        run: npm ci

      - name: Check licenses
        run: |
          echo "Checking package licenses..."
          license-checker --json --out licenses.json
          license-checker --summary > license-summary.txt
          
          # Check for problematic licenses
          PROBLEMATIC_LICENSES="GPL-2.0,GPL-3.0,AGPL-1.0,AGPL-3.0"
          if license-checker --excludePrivatePackages --failOn "$PROBLEMATIC_LICENSES" > /dev/null 2>&1; then
            echo "✅ No problematic licenses found"
          else
            echo "❌ Problematic licenses detected"
            license-checker --excludePrivatePackages --failOn "$PROBLEMATIC_LICENSES"
            exit 1
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: |
            licenses.json
            license-summary.txt
          retention-days: 30

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, 0BSD
          deny-licenses: GPL-2.0, GPL-3.0, AGPL-1.0, AGPL-3.0

  security-tests:
    name: Security Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security tests
        run: |
          echo "Running security-focused tests..."
          npm run test -- --testNamePattern="Security|security" --verbose
          
      - name: Run integration security tests
        run: |
          echo "Running security integration tests..."
          npm run test -- tests/integration/SecurityIntegration.test.ts --verbose

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended,security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-audit, license-check, secret-scan, security-tests]
    if: always()
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date -u)" >> security-summary.md
          echo "**Repository:** ${{ github.repository }}" >> security-summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Job Results" >> security-summary.md
          echo "- **Dependency Audit:** ${{ needs.dependency-audit.result }}" >> security-summary.md
          echo "- **License Check:** ${{ needs.license-check.result }}" >> security-summary.md
          echo "- **Secret Scan:** ${{ needs.secret-scan.result }}" >> security-summary.md
          echo "- **Security Tests:** ${{ needs.security-tests.result }}" >> security-summary.md
          echo "" >> security-summary.md
          
          if [ -f security-reports/npm-audit-results/audit-report.txt ]; then
            echo "## NPM Audit Details" >> security-summary.md
            echo "\`\`\`" >> security-summary.md
            cat security-reports/npm-audit-results/audit-report.txt >> security-summary.md
            echo "\`\`\`" >> security-summary.md
          fi

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security-summary.md')) {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [dependency-audit, secret-scan]
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
    
    steps:
      - name: Send notification
        run: |
          echo "🚨 Security scan failed on main branch or scheduled run"
          echo "Repository: ${{ github.repository }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          # In a real environment, this would integrate with Slack, email, or other notification systems
          # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"Security scan failed"}' $SLACK_WEBHOOK_URL